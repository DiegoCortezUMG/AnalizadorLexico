/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lexical.analizer;

/**
 * Analizador léxico Jaguar
 * Proyecto compiladores, fase 2, grupo 4
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
/**
 *
 * @author Grupo 4 compiladores.
 */
public class IDE extends javax.swing.JFrame {
    /**
     * Creates new form IDE
     */
    public IDE() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextoEntrada = new javax.swing.JTextArea();
        AnLexico = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        SalidaLexico = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        AnSintactico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TextoEntrada.setColumns(20);
        TextoEntrada.setRows(5);
        jScrollPane1.setViewportView(TextoEntrada);

        AnLexico.setText("Analisis Léxico");
        AnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnLexicoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel1.setText("IDE: Jaguar");

        SalidaLexico.setEditable(false);
        SalidaLexico.setColumns(20);
        SalidaLexico.setRows(5);
        jScrollPane2.setViewportView(SalidaLexico);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel2.setText("Código:");

        jLabel3.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel3.setText("Salida:");

        AnSintactico.setText("Analisis Sintáctico");
        AnSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnSintacticoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AnLexico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnSintactico)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(0, 485, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AnLexico)
                    .addComponent(AnSintactico))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnLexicoActionPerformed
        // EL archivo se imprime a la jTextArea
    JFileChooser fileChooser = new JFileChooser(); // crea un objeto JFileChooser
    int seleccion = fileChooser.showOpenDialog(this); // muestra el cuadro de diálogo "Abrir archivo"
    if (seleccion == JFileChooser.APPROVE_OPTION) { // si se selecciona un archivo
        File archivo = fileChooser.getSelectedFile(); // obtiene el archivo seleccionado
        try {
            FileInputStream fstream = new FileInputStream(archivo);
            String nombre = archivo.getPath(); // obtiene la ruta del archivo seleccionado
            FileReader lector = new FileReader(nombre);
            BufferedReader lectorb = new BufferedReader(lector);
            TextoEntrada.read(lectorb,null);
            lectorb.close();
            TextoEntrada.requestFocus();
            InputStream entrada = new FileInputStream(archivo); 
        // entrada convierte el archivo a texto ara que lea el analizador
            BufferedReader br = new BufferedReader(new InputStreamReader(entrada));
        String strLine;
        ArrayList<String> lines = new ArrayList<String> ();
        //empieza el análisis léxico
        // Lee línea por línea
        while ((strLine = br.readLine()) != null)   {
          lines.add(strLine);
            //System.out.println(strLine);
        }
        // Cierra el flujo de tokens
        br.close();
        Tokens token = new Tokens(lines);
        //System.out.println();
        int resp = token.lexicAnalizer();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Se imprime el resultado (escrito al "archivo SalidaLex") en la otra text area
        try {
            //FileInputStream fstream = new FileInputStream("src/lexical/analizer/SalidaLex");
            //String nombre = archivo.getPath(); // obtiene la ruta del archivo seleccionado
            FileReader lector = new FileReader("src/lexical/analizer/SalidaLex");
            BufferedReader lectorb = new BufferedReader(lector);
            SalidaLexico.read(lectorb,null);
            lectorb.close();
            SalidaLexico.requestFocus();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_AnLexicoActionPerformed

    private void AnSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnSintacticoActionPerformed
        // TODO add your handling code here:
    JFileChooser fileChooser = new JFileChooser(); // crea un objeto JFileChooser
    int seleccion = fileChooser.showOpenDialog(this); // muestra el cuadro de diálogo "Abrir archivo"
    if (seleccion == JFileChooser.APPROVE_OPTION) { // si se selecciona un archivo
        File archivo = fileChooser.getSelectedFile(); // obtiene el archivo seleccionado
        try {
            FileInputStream fstream = new FileInputStream(archivo);
            String nombre = archivo.getPath(); // obtiene la ruta del archivo seleccionado
            FileReader lector = new FileReader(nombre);
            BufferedReader lectorb = new BufferedReader(lector);
            TextoEntrada.read(lectorb,null);
            lectorb.close();
            TextoEntrada.requestFocus();
            InputStream entrada = new FileInputStream(archivo); 
        // entrada convierte el archivo a texto ara que lea el analizador
            BufferedReader br = new BufferedReader(new InputStreamReader(entrada));
        String strLine;
        ArrayList<String> lines = new ArrayList<String> ();
        //empieza el análisis léxico
        // Lee línea por línea
        while ((strLine = br.readLine()) != null)   {
          lines.add(strLine);
            //System.out.println(strLine);
        }
        // Cierra el flujo de tokens
        br.close();
        Sintaxis Sintax = new Sintaxis(lines);
        //System.out.println();
        int resp = Sintax.lexicAnalizer();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
        //Se imprime el resultado (escrito al "archivo SalidaLex") en la otra text area
        try {
            //FileInputStream fstream = new FileInputStream("src/lexical/analizer/SalidaLex");
            //String nombre = archivo.getPath(); // obtiene la ruta del archivo seleccionado
            FileReader lector = new FileReader("src/lexical/analizer/SalidaLex");
            BufferedReader lectorb = new BufferedReader(lector);
            SalidaLexico.read(lectorb,null);
            lectorb.close();
            SalidaLexico.requestFocus();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    }//GEN-LAST:event_AnSintacticoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    // Abre el archivo
    /*FileInputStream fstream = new FileInputStream("src/lexical/analizer/SalidaLex");
    File salida = new File("src/lexical/analizer/SalidaLex");;
    BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

    
    String strLine;
    ArrayList<String> lines = new ArrayList<String> ();

    // Lee línea por línea
    System.out.println("--");
    while ((strLine = br.readLine()) != null)   {
      lines.add(strLine);
        System.out.println(strLine);
    }
    // Cierra el flujo de tokens
    br.close();
    
    Tokens token = new Tokens(lines);
    System.out.println("--");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnLexico;
    private javax.swing.JButton AnSintactico;
    private javax.swing.JTextArea SalidaLexico;
    private javax.swing.JTextArea TextoEntrada;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
